{"version":3,"file":"logger.js","sources":["../src/logger.js"],"sourcesContent":["import inRange from 'lodash.inrange';\nimport isObject from 'lodash.isobject';\nimport isString from 'lodash.isstring';\nimport isNumber from 'lodash.isnumber';\nimport isUndefined from 'lodash.isundefined';\nimport isFunction from 'lodash.isfunction';\nimport isEmpty from 'lodash.isempty';\n\nimport os from 'os';\nimport net from 'net';\nimport tls from 'tls';\nimport urlUtil from 'url';\nimport { Writable } from 'stream';\nimport reconnectCore from 'reconnect-core';\nimport * as defaults from './defaults';\nimport * as levelUtil from './levels';\nimport text from './text';\nimport build from './serialize';\nimport {\n    BadOptionsError,\n    LogentriesError\n} from './error';\nimport RingBuffer from './ringbuffer';\nimport BunyanStream from './bunyanstream';\n\n// patterns\nconst newline = /\\n/g;\nconst tokenPattern = /[a-f\\d]{8}-([a-f\\d]{4}-){3}[a-f\\d]{12}/;\n\n// exposed Logger events\nconst errorEvent = 'error';\nconst logEvent = 'log';\nconst connectedEvent = 'connected';\nconst disconnectedEvent = 'disconnected';\nconst timeoutEvent = 'timed out';\nconst drainWritableEvent = 'drain';\nconst finishWritableEvent = 'finish';\nconst pipeWritableEvent = 'pipe';\nconst unpipeWritableEvent = 'unpipe';\nconst bufferDrainEvent = 'buffer drain';\n\n/**\n * Append log string to provided token.\n *\n * @param log\n * @param token\n */\nconst finalizeLogString = (log, token) =>\n    `${token} ${log.toString().replace(newline, '\\u2028')}\\n`;\n\n/**\n * Get console method corresponds to lvl\n *\n * @param lvl\n * @returns {*}\n */\nconst getConsoleMethod = lvl => {\n  if (lvl > 3) {\n    return 'error';\n  } else if (lvl === 3) {\n    return 'warn';\n  }\n  return 'log';\n};\n\n/**\n * Get a new prop name that does not exist in the log.\n *\n * @param log\n * @param prop\n * @returns safeProp\n */\nconst getSafeProp = (log, prop) => {\n  let safeProp = prop;\n  while (safeProp in log) {\n    safeProp = `_${safeProp}`;\n  }\n  return safeProp;\n};\n\n/**\n * Logger class that handles parsing of logs and sending logs to Logentries.\n */\nclass Logger extends Writable {\n  constructor(opts) {\n    super({\n      objectMode: true\n    });\n\n    // Sanity checks\n    if (isUndefined(opts)) {\n      throw new BadOptionsError(opts, text.noOptions());\n    }\n\n    if (!isObject(opts)) {\n      throw new BadOptionsError(opts, text.optionsNotObj(typeof opts));\n    }\n\n    if (isUndefined(opts.token)) {\n      throw new BadOptionsError(opts, text.noToken());\n    }\n\n    if (!isString(opts.token) || !tokenPattern.test(opts.token)) {\n      throw new BadOptionsError(opts, text.invalidToken(opts.token));\n    }\n\n    // Log method aliases\n    this.levels = levelUtil.normalize(opts);\n\n    for (const lvlName of this.levels) {\n      if (lvlName in this) {\n        throw new BadOptionsError(opts, text.levelConflict(lvlName));\n      }\n\n      Object.defineProperty(this, lvlName, {\n        enumerable: true,\n        writable: false,\n        value() {\n          this.log.apply(this, [lvlName, ...arguments]);\n        }\n      });\n    }\n\n    // boolean options\n    this.secure = opts.secure === undefined ? defaults.secure : opts.secure;\n    this.debugEnabled = opts.debug === undefined ? defaults.debug : opts.debug;\n    this.json = opts.json;\n    this.flatten = opts.flatten;\n    this.flattenArrays = 'flattenArrays' in opts ? opts.flattenArrays : opts.flatten;\n    this.console = opts.console;\n    this.withLevel = 'withLevel' in opts ? opts.withLevel : true;\n    this.withStack = opts.withStack;\n    this.withHostname = opts.withHostname || false;\n    this.timestamp = opts.timestamp || false;\n\n    // string or numeric options\n    this.bufferSize = opts.bufferSize || defaults.bufferSize;\n    this.port = opts.port || (this.secure ? defaults.portSecure : defaults.port);\n    this.host = opts.host;\n    this.minLevel = opts.minLevel;\n    this.replacer = opts.replacer;\n    this.inactivityTimeout = opts.inactivityTimeout || defaults.inactivityTimeout;\n    this.disableTimeout = opts.disableTimeout;\n    this.token = opts.token;\n    this.reconnectInitialDelay = opts.reconnectInitialDelay || defaults.reconnectInitialDelay;\n    this.reconnectMaxDelay = opts.reconnectMaxDelay || defaults.reconnectMaxDelay;\n    this.reconnectBackoffStrategy =\n        opts.reconnectBackoffStrategy || defaults.reconnectBackoffStrategy;\n\n    if (!this.debugEnabled) {\n      // if there is no debug set, empty logger should be used\n      this.debugLogger = {\n        log: () => {\n        }\n      };\n    } else {\n      this.debugLogger =\n          (opts.debugLogger && opts.debugLogger.log) ? opts.debugLogger : defaults.debugLogger;\n    }\n\n    const isSecure = this.secure;\n    this.ringBuffer = new RingBuffer(this.bufferSize);\n    this.reconnect = reconnectCore(function initialize() {\n      let connection;\n      const args = [].slice.call(arguments);\n      if (isSecure) {\n        connection = tls.connect.apply(tls, args, () => {\n          if (!connection.authorized) {\n            const errMsg = connection.authorizationError;\n            this.emit(new LogentriesError(text.authError(errMsg)));\n          } else if (tls && tls.CleartextStream && connection instanceof tls.CleartextStream) {\n            this.emit('connect');\n          }\n        });\n      } else {\n        connection = net.connect.apply(null, args);\n      }\n      if (!opts.disableTimeout) {\n        connection.setTimeout(opts.inactivityTimeout || defaults.inactivityTimeout);\n      }\n      return connection;\n    });\n\n    // RingBuffer emits buffer shift event, meaning we are discarding some data!\n    this.ringBuffer.on('buffer shift', () => {\n      this.debugLogger.log('Buffer is full, will be shifting records until buffer is drained.');\n    });\n\n    this.on(bufferDrainEvent, () => {\n      this.debugLogger.log('RingBuffer drained.');\n      this.drained = true;\n    });\n\n    this.on(timeoutEvent, () => {\n      if (this.drained) {\n        this.debugLogger.log(\n            `Socket was inactive for ${this.inactivityTimeout / 1000} seconds. Destroying.`);\n        this.closeConnection();\n      } else {\n        this.debugLogger.log('Inactivity timeout event emitted but buffer was not drained.');\n        this.once(bufferDrainEvent, () => {\n          this.debugLogger.log('Buffer drain event emitted for inactivity timeout.');\n          this.closeConnection();\n        });\n      }\n    });\n  }\n\n  /**\n   * Override Writable _write method.\n   * Get the connection promise .then write the next log on the ringBuffer\n   * to Logentries connection when its available\n   */\n  _write(ch, enc, cb) {\n    this.drained = false;\n    this.connection.then(conn => {\n      const record = this.ringBuffer.read();\n      if (record) {\n        // we are checking the buffer state here just after conn.write()\n        // to make sure the last event is sent to socket.\n        if (this.ringBuffer.isEmpty()) {\n          conn.write(record, () => {\n            process.nextTick(() => {\n              this.emit(bufferDrainEvent);\n              // this event is DEPRECATED - will be removed in next major release.\n              // new users should use 'buffer drain' event instead.\n              this.emit('connection drain');\n            });\n          });\n        } else {\n          conn.write(record);\n        }\n      } else {\n        this.debugLogger.log('This should not happen. Read from ringBuffer returned null.');\n      }\n      cb();\n    }).catch(err => {\n      this.emit(errorEvent, err);\n      this.debugLogger.log(`Error: ${err}`);\n      cb();\n    });\n  }\n\n  setDefaultEncoding() { /* no. */\n  }\n\n  /**\n   * Finalize the log and write() to Logger stream\n   * @param lvl\n   * @param log\n   */\n  log(lvl, log) {\n    let modifiedLevel = lvl;\n    let modifiedLog = log;\n    // lvl is optional\n    if (modifiedLog === undefined) {\n      modifiedLog = modifiedLevel;\n      modifiedLevel = null;\n    }\n\n    let lvlName;\n\n    if (modifiedLevel || modifiedLevel === 0) {\n      [modifiedLevel, lvlName] = this.toLevel(modifiedLevel);\n\n      // If lvl is present, it must be recognized\n      if (!modifiedLevel && modifiedLevel !== 0) {\n        this.emit(errorEvent, new LogentriesError(text.unknownLevel(modifiedLevel)));\n        return;\n      }\n\n      // If lvl is below minLevel, it is dismissed\n      if (modifiedLevel < this.minLevel) {\n        return;\n      }\n    }\n\n    // If log is an array, it is treated as a collection of log events\n    if (Array.isArray(modifiedLog)) {\n      if (modifiedLog.length) {\n        for (const $modifiedLog of modifiedLog) this.log(modifiedLevel, $modifiedLog);\n      } else {\n        this.emit(errorEvent, new LogentriesError(text.noLogMessage()));\n      }\n      return;\n    }\n\n    // If log is an object, it is serialized to string and may be augmented\n    // with timestamp and level. For strings, these may be prepended.\n    if (isObject(modifiedLog)) {\n      let safeTime;\n      let safeLevel;\n      let safeHost;\n\n      if (this.timestamp) {\n        safeTime = getSafeProp(modifiedLog, 'time');\n        modifiedLog[safeTime] = new Date();\n      }\n\n      if (this.withLevel && lvlName) {\n        safeLevel = getSafeProp(modifiedLog, 'level');\n        modifiedLog[safeLevel] = lvlName;\n      }\n\n      if (this.withHostname) {\n        safeHost = getSafeProp(modifiedLog, 'host');\n        modifiedLog[safeHost] = os.hostname();\n      }\n\n      modifiedLog = this._serialize(modifiedLog);\n\n      if (!modifiedLog) {\n        this.emit(errorEvent, new LogentriesError(text.serializedEmpty()));\n        return;\n      }\n\n      if (this.console) {\n        console[getConsoleMethod(modifiedLevel)](JSON.parse(modifiedLog));\n      }\n\n      if (safeTime) delete modifiedLog[safeTime];\n      if (safeLevel) delete modifiedLog[safeLevel];\n      if (safeHost) delete modifiedLog[safeHost];\n    } else {\n      if (isEmpty(modifiedLog)) {\n        this.emit(errorEvent, new LogentriesError(text.noLogMessage()));\n        return;\n      }\n\n      modifiedLog = [modifiedLog.toString()];\n\n      if (this.withLevel && lvlName) {\n        modifiedLog.unshift(lvlName);\n      }\n\n      if (this.withHostname) {\n        modifiedLog.unshift(os.hostname());\n      }\n\n      if (this.timestamp) {\n        modifiedLog.unshift((new Date()).toISOString());\n      }\n\n      modifiedLog = modifiedLog.join(' ');\n\n      if (this.console) {\n        console[getConsoleMethod(modifiedLevel)](modifiedLog);\n      }\n    }\n\n    this.emit(logEvent, modifiedLog);\n\n    // if RingBuffer.write returns false, don't create any other write request for\n    // the writable stream to avoid memory leak this means there are already 'bufferSize'\n    // of write events in the writable stream and that's what we want.\n    if (this.ringBuffer.write(finalizeLogString(modifiedLog, this.token))) {\n      this.write();\n    }\n  }\n\n  /**\n   * Close connection via reconnection\n   */\n  closeConnection() {\n    this.debugLogger.log('Closing retry mechanism along with its connection.');\n    if (!this.reconnection) {\n      this.debugLogger.log('No reconnection instance found. Returning.');\n      return;\n    }\n    // this makes sure retry mechanism and connection will be closed.\n    this.reconnection.disconnect();\n    this.connection = null;\n  }\n\n  // Private methods\n  toLevel(val) {\n    let num;\n\n    if (levelUtil.isNumberValid(val)) {\n      num = parseInt(val, 10); // -0\n    } else {\n      num = this.levels.indexOf(val);\n    }\n\n    const name = this.levels[num];\n\n    return name ? [num, name] : [];\n  }\n\n  get reconnect() {\n    return this._reconnect;\n  }\n\n  set reconnect(func) {\n    this._reconnect = func;\n  }\n\n  get connection() {\n    // The $connection property is a promise. On error, manual close, or\n    // inactivityTimeout, it deletes itself.\n    if (this._connection) {\n      return this._connection;\n    }\n\n    this.debugLogger.log('No connection exists. Creating a new one.');\n    // clear the state of previous reconnection and create a new one with a new connection promise.\n    if (this.reconnection) {\n      // destroy previous reconnection instance if it exists.\n      this.reconnection.disconnect();\n      this.reconnection = null;\n    }\n\n    this.reconnection = this.reconnect({\n      // all options are optional\n      initialDelay: this.reconnectInitialDelay,\n      maxDelay: this.reconnectMaxDelay,\n      strategy: this.reconnectBackoffStrategy,\n      failAfter: Infinity,\n      randomisationFactor: 0,\n      immediate: false\n    });\n\n    this.connection = new Promise((resolve) => {\n      const connOpts = {\n        host: this.host,\n        port: this.port\n      };\n\n      // reconnection listeners\n      this.reconnection.on('connect', (connection) => {\n        this.debugLogger.log('Connected');\n        this.emit(connectedEvent);\n\n        // connection listeners\n        connection.on('timeout', () => {\n          this.emit(timeoutEvent);\n        });\n        resolve(connection);\n      });\n\n      this.reconnection.on('reconnect', (n, delay) => {\n        if (n > 0) {\n          this.debugLogger.log(`Trying to reconnect. Times: ${n} , previous delay: ${delay}`);\n        }\n      });\n\n      this.reconnection.once('disconnect', () => {\n        this.debugLogger.log('Socket was disconnected');\n        this.connection = null;\n        this.emit(disconnectedEvent);\n      });\n\n      this.reconnection.on('error', (err) => {\n        this.debugLogger.log(`Error occurred during connection: ${err}`);\n      });\n\n      // now try to connect\n      this.reconnection.connect(connOpts);\n    });\n    return this.connection;\n  }\n\n  set connection(obj) {\n    this._connection = obj;\n  }\n\n  get reconnection() {\n    return this._reconnection;\n  }\n\n  set reconnection(func) {\n    this._reconnection = func;\n  }\n\n  get debugEnabled() {\n    return this._debugEnabled;\n  }\n\n  set debugEnabled(val) {\n    this._debugEnabled = !!val;\n  }\n\n  get debugLogger() {\n    return this._debugLogger;\n  }\n\n  set debugLogger(func) {\n    this._debugLogger = func;\n  }\n\n  get ringBuffer() {\n    return this._ringBuffer;\n  }\n\n  set ringBuffer(obj) {\n    this._ringBuffer = obj;\n  }\n\n  get secure() {\n    return this._secure;\n  }\n\n  set secure(val) {\n    this._secure = !!val;\n  }\n\n  get token() {\n    return this._token;\n  }\n\n  set token(val) {\n    this._token = val;\n  }\n\n  get bufferSize() {\n    return this._bufferSize;\n  }\n\n  set bufferSize(val) {\n    this._bufferSize = val;\n  }\n\n  get console() {\n    return this._console;\n  }\n\n  set console(val) {\n    this._console = !!val;\n  }\n\n  get serialize() {\n    return this._serialize;\n  }\n\n  set serialize(func) {\n    this._serialize = func;\n  }\n\n  get flatten() {\n    return this._flatten;\n  }\n\n  set flatten(val) {\n    this._flatten = !!val;\n    this.serialize = build(this);\n  }\n\n  get flattenArrays() {\n    return this._flattenArrays;\n  }\n\n  set flattenArrays(val) {\n    this._flattenArrays = !!val;\n    this.serialize = build(this);\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(val) {\n    if (!isString(val) || !val.length) {\n      this._host = defaults.host;\n      return;\n    }\n\n    const host = val.replace(/^https?:\\/\\//, '');\n\n    const url = urlUtil.parse(`http://${host}`);\n\n    this._host = url.hostname || defaults.host;\n\n    if (url.port) this.port = url.port;\n  }\n\n  get json() {\n    return this._json;\n  }\n\n  set json(val) {\n    this._json = val;\n  }\n\n  get reconnectMaxDelay() {\n    return this._reconnectMaxDelay;\n  }\n\n  set reconnectMaxDelay(val) {\n    this._reconnectMaxDelay = val;\n  }\n\n  get reconnectInitialDelay() {\n    return this._reconnectInitialDelay;\n  }\n\n  set reconnectInitialDelay(val) {\n    this._reconnectInitialDelay = val;\n  }\n\n  get reconnectBackoffStrategy() {\n    return this._reconnectBackoffStrategy;\n  }\n\n  set reconnectBackoffStrategy(val) {\n    this._reconnectBackoffStrategy = val;\n  }\n\n  get minLevel() {\n    return this._minLevel;\n  }\n\n  set minLevel(val) {\n    const [num] = this.toLevel(val);\n\n    this._minLevel = isNumber(num) ? num : 0;\n  }\n\n  get port() {\n    return this._port;\n  }\n\n  set port(val) {\n    const port = parseFloat(val);\n    if (Number.isInteger(port) && inRange(port, 65536)) this._port = port;\n  }\n\n  get replacer() {\n    return this._replacer;\n  }\n\n  set replacer(val) {\n    this._replacer = isFunction(val) ? val : undefined;\n    this.serialize = build(this);\n  }\n\n  get inactivityTimeout() {\n    return this._inactivityTimeout;\n  }\n\n  set inactivityTimeout(val) {\n    if (Number.isInteger(val) && val >= 0) {\n      this._inactivityTimeout = parseInt(val, 10);\n    }\n\n    if (!isNumber(this._inactivityTimeout)) {\n      this._inactivityTimeout = defaults.inactivityTimeout;\n    }\n  }\n\n  get timestamp() {\n    return this._timestamp;\n  }\n\n  set timestamp(val) {\n    this._timestamp = !!val;\n  }\n\n  get withHostname() {\n    return this._withHostname;\n  }\n\n  set withHostname(val) {\n    this._withHostname = val;\n  }\n\n  get withLevel() {\n    return this._withLevel;\n  }\n\n  set withLevel(val) {\n    this._withLevel = !!val;\n  }\n\n  get withStack() {\n    return this._withStack;\n  }\n\n  set withStack(val) {\n    this._withStack = !!val;\n    this.serialize = build(this);\n  }\n\n  get levels() {\n    return this._levels && this._levels.slice();\n  }\n\n  set levels(val) {\n    this._levels = val;\n  }\n\n  get disableTimeout() {\n    return this._disableTimeout;\n  }\n\n  set disableTimeout(val) {\n    this._disableTimeout = !!val;\n  }\n\n  // Deprecated (to support migrants from le_node)\n  level(name) {\n    console.warn(text.deprecatedLevelMethod());\n    if (~this.levels.indexOf(name)) this.minLevel = name;\n  }\n\n  /**\n   * Prepare a BunyanStream.\n   * @param opts\n   * @returns {{level: *, name: string, stream: BunyanStream, type: string}}\n   */\n  static bunyanStream(opts) {\n    const stream = new BunyanStream(opts);\n    const [, level] = stream.logger.toLevel(stream.logger.minLevel);\n    const type = 'raw';\n    const name = 'logentries';\n\n    // Defer to Bunyan’s handling of minLevel\n    stream.logger.minLevel = 0;\n\n    return { level, name, stream, type };\n  }\n}\n\nexport {\n    Logger as default,\n    errorEvent,\n    logEvent,\n    connectedEvent,\n    disconnectedEvent,\n    timeoutEvent,\n    drainWritableEvent,\n    finishWritableEvent,\n    pipeWritableEvent,\n    unpipeWritableEvent,\n    bufferDrainEvent\n};\n"],"names":["_levels","_withStack","_withLevel","_withHostname","_timestamp","_inactivityTimeout","_replacer","parseFloat","_port","_minLevel","default","_reconnect","level","Writable","disableTimeout","isArray","type","text","logger","parseInt","BunyanStream","connect","url","stream","_disableTimeout","tokenPattern","reconnectMaxDelay","warn","json","minLevel","indexOf","_reconnectBackoffStrategy","_reconnectMaxDelay","_json","JSON","inactivityTimeout","_reconnectInitialDelay","join","getSafeProp","safeTime","urlUtil","_host","parse","maxDelay","_flattenArrays","serialize","_flatten","_console","_bufferSize","_debugLogger","_token","_secure","_ringBuffer","strategy","call","num","authorizationError","obj","RingBuffer","replace","toLevel","once","CleartextStream","finishWritableEvent","cb","_reconnection","_debugEnabled","delay","pipeWritableEvent","drainWritableEvent","n","connOpts","immediate","resolve","randomisationFactor","ringBuffer","Infinity","isSecure","failAfter","debugLogger","args","isNumberValid","initialDelay","levelConflict","deprecatedLevelMethod","withHostname","func","noToken","_connection","errorEvent","name","catch","initialize","toString","Array","getConsoleMethod","timeoutEvent","prop","unknownLevel","val","reconnection","_serialize","disconnect","portSecure","serializedEmpty","port","writable","timestamp","lvl","disconnectedEvent","net","safeHost","hostname","os","Date","toISOString","unshift","Logger","safeLevel","$modifiedLog","noLogMessage","length","safeProp","ch","bufferDrainEvent","nextTick","errMsg","newline","process","read","isEmpty","conn","write","record","then","reconnect","enc","setTimeout","closeConnection","log","drained","on","connection","opts","defaults","apply","emit","tls","LogentriesError","authError","authorized","slice","arguments","bufferSize","secure","debugEnabled","reconnectBackoffStrategy","reconnectInitialDelay","token","replacer","host","withStack","withLevel","console","flattenArrays","flatten","debug","undefined","levels","lvlName","value","enumerable","BadOptionsError","levelUtil","normalize","invalidToken","test","optionsNotObj","noOptions","objectMode","finalizeLogString","unpipeWritableEvent","connectedEvent","logEvent"],"mappings":"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"}